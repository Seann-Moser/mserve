// noinspection JSUnusedGlobalSymbols, DuplicateCode

/**
 * @typedef {Object} {{.Name}}Client
 * {{range .Endpoints}}
 * @property {({{jsParams .}}) => Promise<any>} {{.FunctionName}} - Calls {{.Method}} {{.Path}}
 * {{end}}
 */
import { defineNuxtPlugin, useRuntimeConfig } from '#app'

function classToObject(instance) {
  const seen = new WeakSet();

  function recurse(obj) {
    if (obj && typeof obj === "object") {
      if (seen.has(obj)) return;     // break the cycle
      seen.add(obj);
      if (Array.isArray(obj)) {
        return obj.map(recurse);
      }
      const result = {};
      for (const key of Object.getOwnPropertyNames(obj)) {
        result[key] = recurse(obj[key]);
      }
      return result;
    }
    return obj;                       // primitive or function
  }

  // copy own + prototype methods if you need them…
  const data = recurse(instance);
  // (plus any method-binding logic from before)
  return data;
}


// --- Generated Request Body Classes ---
{{range .Endpoints}}{{if .HasBody}}
/**
 * Class representing the request body for {{.FunctionName}}
 */
export class {{.FunctionName}}Request {
  // Declare properties based on body schema
  {{range $prop := .RequestBodySchema.Properties}}
  /**
   * {{with $prop.Description}}{{.}}{{else}}{{$prop.Name}}{{end}}
   * @type {{jsDocType $prop.Schema}}
   */
  {{$prop.Name}};
  {{end}}

  /**
   * Create a new {{.FunctionName}}Request
   * @param {Partial<{{.FunctionName}}Request>} init - Initial values for fields
   */
  constructor(init = {}) {
    Object.assign(this, init)
  }
}
{{end}}{{end}}

export default defineNuxtPlugin((nuxtApp) => {
  const config = useRuntimeConfig()
  const baseURL = config.public.generated{{.Name}}BaseUrl || 'http://localhost:3000'

  /**
   * {{.Name}}Client Class
   */
  class {{.Name}}Client {
    constructor(baseURL, globalOptions = {}) {
      this.baseURL = baseURL
      this.globalOptions = globalOptions
    }

    _fetch(urlPath, fetchOptions = {}) {
      const fullUrl = new URL(urlPath, this.baseURL).toString();

      // Destructure out body so we can conditionally re-attach it
      const { body, headers: customHeaders = {}, method = 'GET', ...rest } = fetchOptions;
      const upperMethod = method.toUpperCase();

      // Only serialize & send a body on methods that allow it
      const hasBody = body != null && !['GET', 'HEAD'].includes(upperMethod);

      // Build headers: only add Content-Type if there’s a real body
      const headers = {
        ...(hasBody ? { 'Content-Type': 'application/json' } : {}),
        ...this.globalOptions.headers,
        ...customHeaders,
      };

      const init = {
        ...this.globalOptions.fetchOptions,
        ...rest,
        method: upperMethod,
        headers,
        ...(hasBody ? { body: JSON.stringify(body) } : {}),
      };
      init["credentials"] = "include"

      return fetch(fullUrl, init)
        // first, check for HTTP errors
        .then(response => {
          if (!response.ok) {
            const ct = response.headers.get('content-type') || '';
            if (ct.includes('application/json')) {
              return response.json().catch(() => ({}))
                .then(errData => { throw new Error(errData.message || response.statusText); });
            }
            return response.text()
              .then(text => { throw new Error(text || response.statusText); });
          }
          const data =  response.json();
          // Turn the Headers into a plain object
          const headers = Object.fromEntries(response.headers.entries());

          // Merge and return
          return { ...data, headers };
        });
    }



    {{range .Endpoints}}
    /**
     * Calls {{.Method}} {{.Path}}
     {{with .PathParams}}{{range .}}
     * @param {{"{"}} {{jsDocType .Schema}} {{"}"}} {{.Name}} - Path parameter '{{.Name}}'
     {{end}}{{end}}{{with .QueryParams}}{{range .}}
     * @param {{"{"}} {{jsDocType .Schema}} {{"}"}} [{{.Name}}] - Query parameter '{{.Name}}'
     {{end}}{{end}}{{with .HeaderParams}}{{range .}}
     * @param {{"{"}} {{jsDocType .Schema}} {{"}"}} [{{.Name}}] - Header parameter '{{.Name}}'
     {{end}}{{end}}
     {{if .HasBody}}* @param {{"{"}} {{.FunctionName}}Request {{"}"}} body - Request body instance
     {{end}}
     * @returns {Promise<any>}
     */
    {{.FunctionName}}({{jsParams .}}) {
      let path = {{interpolatePath .Path .PathParams}}
      const urlParams = new URLSearchParams()
      {{queryParamsAppends .QueryParams}}
      {{with .PathParams}}{{range .}}urlParams.set("{{.Name}}",{{.Name}})
      {{end}}{{end}}

      if (urlParams.toString()) {
        path += `?${urlParams.toString()}`
      }
      const fetchOptions = {
        method: '{{.Method}}',
        headers: {{headersObject .HeaderParams}},
        {{if .HasBody}}body: classToObject(body),{{end}}
      }
      return this._fetch(path, fetchOptions)
    }
    {{end}}
  }

  // Provide the API client as ${{.ApiName}}
  nuxtApp.provide('{{.ApiName}}', new {{.Name}}Client(baseURL, {
    fetchOptions: {},
    headers: {},
  }))
})
